/*This function will take any array, and group the strings in such a way that it will produce the longest results && 
have the strings in the order they appeared in from the original array. It will then join the string as lumped output.
*/

function longestConsec(starr, k){

  let starrCopy = starr.slice(); // had to use slice, if not I would not be able to get a valid copy of Starr, as it would have reassigned starr's values instead of creating a freshCopy
  let finalStarr =[];
  
  if(k <= 0 || starr.length === 0 || k > starr.length){
    return '';
  }
  
  starrCopy.sort(function(a,b){
    return b.length - a.length;
  });
  
  //initial k items from starrCopy must be placed in new Array according to
  // order of starr.
  
  for(let i = 0; i<k; i++){
    
  finalStarr[starr.indexOf(starrCopy[i])] = starrCopy[i];
  console.log(finalStarr);
  }
  console.log(finalStarr.join(''));
  return finalStarr.join('');
}
